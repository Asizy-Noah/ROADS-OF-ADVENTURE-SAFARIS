<div class="dashboard-content">

    

    <form class="category-form" action="/categories/dashboard/edit/<%= category._id %>?_method=PATCH" method="POST" enctype="multipart/form-data">
        <div class="form-section">
            <div class="form-group">
                <label for="categoryName">Name</label>
                <input type="text" id="categoryName" name="name" class="form-control" value="<%= category.name %>" required>
            </div>

            <div class="form-group">
                <label for="categorySlug">Slug</label>
                <input type="text" id="categorySlug" name="slug" class="form-control" value="<%= category.slug %>" readonly>
                <small class="form-text text-muted">Automatically generated from name, but can be manually edited. Best practice: keep it URL-friendly.</small>
            </div>
            
            <div class="form-group">
                <label for="categoryDescription">Description</label>
                <div id="categoryDescriptionEditor" class="editor-container"></div>
                <input type="hidden" name="description" id="categoryDescription" value="<%= category.description %>">
            </div>
            
            <div class="form-group">
                <label for="categoryCountry">Country</label>
                <select id="categoryCountry" name="country" class="form-control">
                    <option value="">All Countries</option>
                    <% countries.forEach(country => { %>
                        <option value="<%= country._id %>" <%= category.country && category.country._id.toString() === country._id.toString() ? 'selected' : '' %>>
                            <%= country.name %>
                        </option>
                    <% }); %>
                </select>
                <small class="form-text text-muted">Select a country or leave as "All Countries" if this category applies to all</small>
            </div>
            
            <div class="form-group">
                <label for="coverImage">Upload Cover Image</label>
                <div class="file-upload-container">
                    <input type="file" id="coverImage" name="image" class="file-input" accept="image/*">
                    <div class="file-upload-box">
                        <i class="fas fa-cloud-upload-alt"></i>
                        <span>Drag & drop image or click to browse</span>
                    </div>
                    <div class="file-preview" id="imagePreview">
                        <% if (category.image) { %>
                            <img src="<%= category.image %>" alt="Current Cover Image" style="display: block;">
                        <% } else { %>
                            <img src="" alt="Image Preview" style="display: none;">
                        <% } %>
                    </div>
                </div>
                <% if (category.image) { %>
                    <small class="form-text text-muted">Current image: <a href="<%= category.image %>" target="_blank">View</a></small>
                <% } else { %>
                    <small class="form-text text-muted">No current image.</small>
                <% } %>
            </div>
        </div>
        
        <div class="form-section">
            <h3 class="section-title">SEO Information</h3>
            
            <div class="form-group">
                <label for="seoTitle">SEO Title</label>
                <input type="text" id="seoTitle" name="seoTitle" class="form-control" value="<%= category.seoTitle || '' %>">
                <small class="form-text text-muted">Recommended length: 50-60 characters</small>
            </div>
            
            <div class="form-group">
                <label for="seoDescription">Meta Description</label>
                <textarea id="seoDescription" name="seoDescription" class="form-control" rows="3"><%= category.seoDescription || '' %></textarea>
                <small class="form-text text-muted">Recommended length: 150-160 characters</small>
            </div>
            
            <div class="form-group">
                <label for="seoKeywords">Meta Keywords</label>
                <input type="text" id="seoKeywords" name="seoKeywords" class="form-control" value="<%= category.seoKeywords || '' %>">
                <small class="form-text text-muted">Separate keywords with commas</small>
            </div>
        </div>
        
        <div class="form-actions">
            <button type="button" class="btn btn-secondary" onclick="window.location.href='/categories/dashboard'">Cancel</button>
            <button type="submit" class="btn btn-primary">Update Category</button>
        </div>
    </form>

    <hr> <div class="form-actions mt-4">
        <button type="button" class="btn btn-danger" id="deleteCategoryBtn" data-category-id="<%= category._id %>">Delete Category</button>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // --- Quill Editor Setup ---
        var quill = new Quill('#categoryDescriptionEditor', {
            theme: 'snow',
            placeholder: 'Write a detailed description...',
            modules: {
                toolbar: [
                    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                    ['bold', 'italic', 'underline', 'strike'],
                    ['blockquote', 'code-block'],
                    [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                    [{ 'script': 'sub'}, { 'script': 'super' }],
                    [{ 'indent': '-1'}, { 'indent': '+1' }],
                    [{ 'direction': 'rtl' }],
                    [{ 'color': [] }, { 'background': [] }],
                    [{ 'font': [] }],
                    [{ 'align': [] }],
                    ['link', 'image', 'video'],
                    ['clean']
                ]
            }
        });

        // Set initial content for Quill from existing data
        const initialDescription = document.getElementById('categoryDescription').value;
        if (initialDescription) {
            quill.root.innerHTML = initialDescription;
        }

        // On form submit, update hidden input with Quill's HTML content
        document.getElementById('editCategoryForm').addEventListener('submit', function() {
            document.getElementById('categoryDescription').value = quill.root.innerHTML;
        });

        // --- Image Preview Logic ---
        const coverImageInput = document.getElementById('coverImage');
        const imagePreview = document.getElementById('imagePreview');
        const imagePreviewImg = imagePreview.querySelector('img');

        coverImageInput.addEventListener('change', function() {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    imagePreviewImg.src = e.target.result;
                    imagePreviewImg.style.display = 'block';
                };
                reader.readAsDataURL(file);
            } else {
                // If no new file selected, revert to existing or hide
                if ('<%= category.image %>' && '<%= category.image %>' !== 'null' && '<%= category.image %>' !== 'undefined') {
                    imagePreviewImg.src = '<%= category.image %>';
                    imagePreviewImg.style.display = 'block';
                } else {
                    imagePreviewImg.src = '';
                    imagePreviewImg.style.display = 'none';
                }
            }
        });

        // --- Name to Slug Generation ---
        const categoryNameInput = document.getElementById('categoryName');
        const categorySlugInput = document.getElementById('categorySlug');

        // Simple slug generation function (you can make this more robust if needed)
        function generateSlug(text) {
            return text
                .toString()
                .normalize('NFD') // normalize to NFD Unicode form
                .replace(/[\u0300-\u036f]/g, '') // remove diacritic marks
                .toLowerCase()
                .trim()
                .replace(/\s+/g, '-') // Replace spaces with -
                .replace(/[^\w-]+/g, '') // Remove all non-word chars
                .replace(/--+/g, '-'); // Replace multiple - with single -
        }

        categoryNameInput.addEventListener('input', function() {
            if (categorySlugInput.readOnly) { // Only auto-generate if not manually edited
                categorySlugInput.value = generateSlug(this.value);
            }
        });

        // Allow manual slug editing
        categorySlugInput.addEventListener('focus', function() {
            this.readOnly = false;
        });
        categorySlugInput.addEventListener('blur', function() {
            // Re-slugify on blur if it was manually edited to ensure valid format
            this.value = generateSlug(this.value);
            // Optionally, you can set it back to readOnly after blur if desired,
            // or leave it editable once focused.
        });

        // --- Delete Category Logic ---
        const deleteCategoryBtn = document.getElementById('deleteCategoryBtn');
        deleteCategoryBtn.addEventListener('click', function() {
            const categoryId = this.dataset.categoryId;
            if (confirm('Are you sure you want to delete this category? This action cannot be undone.')) {
                fetch(`/categories/dashboard/delete/${categoryId}`, {
                    method: 'POST', // Use POST for _method=DELETE if not directly using DELETE requests from client
                    headers: {
                        'Content-Type': 'application/json',
                        // You might need to add CSRF token here if you're using it
                    },
                    body: JSON.stringify({ _method: 'DELETE' }) // For method-override middleware
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(data.message);
                        window.location.href = '/categories/dashboard'; // Redirect to categories list
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error deleting category:', error);
                    alert('An error occurred while deleting the category.');
                });
            }
        });
    });
</script>
